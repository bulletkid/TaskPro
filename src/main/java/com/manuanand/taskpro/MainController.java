package com.manuanand.taskpro;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


// TODO: Split controllers into 2 layers

@Controller	// This means that this class is a Controller
@RequestMapping(path="/taskpro") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@Autowired
	private TaskRepository taskRepository;
	
	///
	// User Repository
	///
	@PostMapping(path="/users") // Map ONLY POST Requests
	public @ResponseBody String addUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/users")
	public @ResponseBody Iterable<User> getUsers(@RequestParam(required = false) Integer id) {
		
		System.out.println("ID is " +id);
		
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	///
	// Task Repository
	///
	@PostMapping(path="/task") // Map ONLY POST Requests
	public @ResponseBody String addTask (
			@RequestParam String name,
			@RequestParam(required = false) String description,
			@RequestParam(required = false) String assignedTo,
			@RequestParam(required = false) String status) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Task task  = new Task();
		task.setName(name);
		task.setDescription(description);
		task.setAssignedTo(assignedTo);
		task.setStatus(status);
		
		return "Task Saved";
	}

	@GetMapping(path="/tasks")
	public @ResponseBody Iterable<Task> getAllUsers() {
		// This returns a JSON or XML with the users
		return taskRepository.findAll();
	}
}
